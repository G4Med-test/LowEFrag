name: INFN run parallel

on:
  workflow_run:
    workflows: ["INFN run unit"]
    types:
      - completed

env:
  MACRO_SPLITS: 5

jobs:
  get-macros:
    runs-on: aiinfn-runner-g4
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      matrix: ${{ steps.expand.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List macro files and expand matrix
        id: expand
        run: |
          PARTS=${{ env.MACRO_SPLITS }}
          MACROS=$(find macro/ -name "*.mac" -type f -printf '%P\n')
          MATRIX='['
          for MACRO in $MACROS; do
            for i in $(seq 0 $((PARTS-1))); do
              MATRIX="$MATRIX{\"macro\":\"$MACRO\",\"part\":$i},"
            done
          done
          MATRIX="${MATRIX%,}]"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-part:
    needs: get-macros
    runs-on: aiinfn-runner-g4
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.get-macros.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Apptainer Cache and Temp Directories
        run: |
          mkdir -p /tmp/apptainer_cache /tmp/apptainer_tmp /tmp/runner
          echo "APPTAINER_CACHEDIR=/tmp/apptainer_cache" >> $GITHUB_ENV
          echo "APPTAINER_TMPDIR=/tmp/apptainer_tmp" >> $GITHUB_ENV

      - name: Set tag and repo lowercase
        id: setup
        run: |
          TAG=${{ github.event.workflow_run.head_sha }}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_lower=$REPO_LOWER" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        run: |
          echo ${{ secrets.GHCR_PAT }} | apptainer registry login -u ${{ secrets.GHCR_USERNAME }} --password-stdin oras://ghcr.io

      - name: Pull Container from GHCR
        run: |
          apptainer pull /tmp/runner/LowEFrag.sif oras://ghcr.io/${{ steps.setup.outputs.repo_lower }}:${{ steps.setup.outputs.tag }}

      - name: Prepare apptainer command
        run: |
          cat <<EOF > /tmp/runner/run
          apptainer exec \
            --unsquash \
            -B /cvmfs/geant4.cern.ch/share/data:/opt/geant4/data \
            -B "\${{ github.workspace }}/macro:/macro" \
            -B "/tmp/outputs:/outputs" \
            /tmp/runner/LowEFrag.sif "\$@"
          EOF
          chmod +x /tmp/runner/run
          mkdir -p /tmp/outputs /tmp/macros

      - name: Generate modified macro
        run: |
          INMACRO="macro/${{ matrix.macro }}"
          OUTMACRO="/tmp/macros/part-${{ matrix.part }}.mac"
          OUTFILE="/outputs/part_${{ matrix.part }}.xml"
          SEED=$((1000 + ${{ matrix.part }}))
          EVENTS=$((1000000 / ${{ env.MACRO_SPLITS }}))

          sed \
            -e "s|/outputs/.*\.xml|$OUTFILE|" \
            -e "/\/run\/beamOn/ c\/run/beamOn $EVENTS" \
            -e "\$a\/random/setSeeds $SEED $SEED" \
            "$INMACRO" > "$OUTMACRO"

          echo "out_macro=$OUTMACRO" >> $GITHUB_ENV

      - name: Run container with modified macro
        run: |
          cd /tmp/runner && ./run /workspace/build/LowEFrag ${{ env.out_macro }}

      - name: Upload output artifact for part
        uses: actions/upload-artifact@v4
        with:
          name: partial-${{ matrix.macro }}
          path: /tmp/outputs/part_${{ matrix.part }}.xml

  merge-parts:
    needs: run-part
    runs-on: aiinfn-runner-g4
    if: always()

    steps:
      - name: Download all part artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge AIDA XML outputs
        run: |
          mkdir -p /tmp/merged
          find artifacts -name '*.xml' > filelist.txt
          python3 .github/scripts/merge_aida.py $(cat filelist.txt) > /tmp/merged/merged.xml

      - name: Upload final merged output
        uses: actions/upload-artifact@v4
        with:
          name: final-merged-output
          path: /tmp/merged/merged.xml
