name: Create Project Entries from Macros

on:
  workflow_run:
    workflows: ["apptainer-run-unit"]
    types:
      - completed
  workflow_dispatch:

jobs:
  populate-project:
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}
      REPO: ${{ github.repository }}
      ORG: G4Med-test
      PROJECT_NUMBER: 1  # confermato da te: https://github.com/orgs/G4Med-test/projects/1

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Populate GitHub Project via Python
        run: |
          python <<EOF
          import os, requests, glob

          TOKEN = os.getenv("GH_TOKEN")
          REPO = os.getenv("REPO")
          ORG = os.getenv("ORG")
          PROJECT_NUMBER = int(os.getenv("PROJECT_NUMBER"))
          API_URL = "https://api.github.com/graphql"
          HEADERS = {"Authorization": f"Bearer {TOKEN}"}

          container_url = f"https://github.com/{REPO}/pkgs/container/{REPO.split('/')[1]}"

          # Ottieni Project ID (organization-level)
          query_project = '''
          query($org: String!, $number: Int!) {
            organization(login: $org) {
              projectV2(number: $number) { id }
            }
          }'''
          r = requests.post(API_URL, headers=HEADERS, json={
              "query": query_project,
              "variables": {"org": ORG, "number": PROJECT_NUMBER}
          })
          response_json = r.json()
          print("DEBUG project query response:", response_json)
          if "data" not in response_json or response_json["data"]["organization"]["projectV2"] is None:
              raise RuntimeError(f"❌ Failed to get project ID for {ORG} project number {PROJECT_NUMBER}. Full response: {response_json}")
          project_id = response_json["data"]["organization"]["projectV2"]["id"]
          

          # Ottieni IDs campi del Project
          query_fields = '''
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first:20) {
                  nodes { id name }
                }
              }
            }
          }'''
          r = requests.post(API_URL, headers=HEADERS, json={"query": query_fields, "variables": {"projectId": project_id}})
          fields = {f["name"]: f["id"] for f in r.json()["data"]["node"]["fields"]["nodes"]}

          # Ottieni opzioni Status
          query_status_opts = '''
          query($fieldId: ID!) {
            node(id: $fieldId) {
              ... on ProjectV2SingleSelectField {
                options { id name }
              }
            }
          }'''
          r = requests.post(API_URL, headers=HEADERS, json={"query": query_status_opts, "variables": {"fieldId": fields["Status"]}})
          status_opts = {o["name"]: o["id"] for o in r.json()["data"]["node"]["options"]}

          macro_files = glob.glob("macro/*.mac")
          repo_name = REPO.split('/')[1]

          for file_path in macro_files:
              macro_name = os.path.basename(file_path)
              job_name = f"{repo_name}-{macro_name}"
              macro_url = f"https://raw.githubusercontent.com/{REPO}/main/macro/{macro_name}"

              # Crea una nuova Issue
              issue_title = f"Run macro {macro_name}"
              issue_body = f"Job for macro {macro_name}"
              r = requests.post(f"https://api.github.com/repos/{REPO}/issues", headers=HEADERS, json={
                  "title": issue_title,
                  "body": issue_body
              })
              issue_node_id = r.json()["node_id"]

              # Aggiungi Issue al Project
              mutation_add = '''
              mutation($input: AddProjectV2ItemByIdInput!) {
                addProjectV2ItemById(input: $input) {
                  item { id }
                }
              }'''
              variables_add = {"input": {"projectId": project_id, "contentId": issue_node_id}}
              r = requests.post(API_URL, headers=HEADERS, json={"query": mutation_add, "variables": variables_add})
              item_id = r.json()["data"]["addProjectV2ItemById"]["item"]["id"]

              # Funzione per impostare campi
              mutation_update = '''
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) { projectV2Item { id } }
              }'''

              def set_field(item_id, field_id, value):
                  vars = {"input": {"projectId": project_id, "itemId": item_id, "fieldId": field_id, "value": value}}
                  requests.post(API_URL, headers=HEADERS, json={"query": mutation_update, "variables": vars})

              # Imposta i campi richiesti
              set_field(item_id, fields["Job name"], {"text": job_name})
              set_field(item_id, fields["Macro"], {"text": macro_url})
              set_field(item_id, fields["Container"], {"text": container_url})
              set_field(item_id, fields["Status"], {"singleSelectOptionId": status_opts["pending"]})

              print(f"✅ Added Project entry for {macro_name}")

          EOF
